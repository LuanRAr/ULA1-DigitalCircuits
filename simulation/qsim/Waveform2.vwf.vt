// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/24/2025 13:39:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg Cin;
reg [2:0] Selector;
// wires                                               
wire Cout;
wire [7:0] S;
wire error;
wire seg_a;
wire seg_b;
wire seg_c;
wire seg_d;
wire seg_e;
wire seg_f;
wire seg_g;
wire tens_a;
wire tens_b;
wire tens_c;
wire tens_d;
wire tens_e;
wire tens_f;
wire tens_g;
wire unit_a;
wire unit_b;
wire unit_c;
wire unit_d;
wire unit_e;
wire unit_f;
wire unit_g;
wire zero;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Cin(Cin),
	.Cout(Cout),
	.S(S),
	.Selector(Selector),
	.error(error),
	.seg_a(seg_a),
	.seg_b(seg_b),
	.seg_c(seg_c),
	.seg_d(seg_d),
	.seg_e(seg_e),
	.seg_f(seg_f),
	.seg_g(seg_g),
	.tens_a(tens_a),
	.tens_b(tens_b),
	.tens_c(tens_c),
	.tens_d(tens_d),
	.tens_e(tens_e),
	.tens_f(tens_f),
	.tens_g(tens_g),
	.unit_a(unit_a),
	.unit_b(unit_b),
	.unit_c(unit_c),
	.unit_d(unit_d),
	.unit_e(unit_e),
	.unit_f(unit_f),
	.unit_g(unit_g),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// Selector[ 2 ]
initial
begin
	repeat(2)
	begin
		Selector[2] = 1'b0;
		Selector[2] = #240000 1'b1;
		# 240000;
	end
	Selector[2] = 1'b0;
end 
// Selector[ 1 ]
initial
begin
	repeat(4)
	begin
		Selector[1] = 1'b0;
		Selector[1] = #120000 1'b1;
		# 120000;
	end
	Selector[1] = 1'b0;
end 
// Selector[ 0 ]
initial
begin
	Selector[0] = 1'b0;
	Selector[0] = #480000 1'b1;
	Selector[0] = #480000 1'b0;
end 
endmodule

